<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sarah Griffis</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2015-02-06T21:21:59-05:00</updated>
 <id></id>
 <author>
   <name>Sarah Griffis</name>
   <email>sgriff211@gmail.com</email>
 </author>

 
 <entry>
   <title>You'll Almost Always Do These Steps</title>
   <link href="/2015/02/06/a-few-nearly-certain-things/"/>
   <updated>2015-02-06T00:00:00-05:00</updated>
   <id>/2015/02/06/a-few-nearly-certain-things</id>
   <content type="html">&lt;p&gt;Just a quick re-cap on MVC:&lt;/p&gt;

&lt;h3&gt;MVC&lt;/h3&gt;

&lt;p&gt;So how does a web app work anyways?  Basically, your &lt;em&gt;model&lt;/em&gt; is your data.
Your &lt;em&gt;view&lt;/em&gt; is what the user sees.  And your &lt;em&gt;controller&lt;/em&gt; controls your data,
both from your web app to your view (what your user sees and interacts with) and
from your view to your model. MVC.&lt;/p&gt;

&lt;h3&gt;The Rails App Recipe&lt;/h3&gt;

&lt;p&gt;In almost every project you are going to want to do a few things.  Namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Application.html.haml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3&quot;&gt;User model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Rake commands&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;&lt;a name=&#39;1&#39;&gt;&lt;/a&gt;Application.html.haml&lt;/h3&gt;

&lt;p&gt;Want to use bootstrap for responsive design?  Flat-UI for a beautifully clean webpage?
d3.js? Google plugins?&lt;/p&gt;

&lt;p&gt;Some of these things you can add as gems, but more often than not it is easiest to add
these things in your &lt;code&gt;app/views/layouts/application.html.haml&lt;/code&gt; file.  This file contains the
code that will be run in every page of your application.  Near the top of this file (it should
have been generated automatically when you ran &lt;code&gt;rails new&lt;/code&gt;) you should be able to add files like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stylesheet_link_tag&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stylesheet_link_tag&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://fonts.googleapis.com/css?family=Lato&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stylesheet_link_tag&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stylesheet_link_tag&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;application&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://maps.googleapis.com/maps/api/js?sensor=false&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;application&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.0/js/bootstrap.min.js&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Do you see the &lt;code&gt;= yield&lt;/code&gt; part of this file?  This is where the rest of your views will be rendered!  You can
add a footer and a header on application.html.haml that will persist across all pages of your app.  More on
that later.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&#39;2&#39;&gt;&lt;/a&gt;Using forms&lt;/h3&gt;

&lt;p&gt;Forms allow users to input data to your webapp.  This may be as simple as entering an email address to super
complicated date, dropdown, radio button, etc. forms.  Simple form is a great tool for using forms in
Rails.  You can install it with bootstrap responsiveness using this command: &lt;code&gt;rails g simple_form:install --bootstrap.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&#39;3&#39;&gt;&lt;/a&gt;User model&lt;/h3&gt;

&lt;p&gt;You&amp;#39;ll probably want to keep track of your users.  To create a user model we need to run a Rails &lt;em&gt;migration&lt;/em&gt;.  But before
we get to migrations, let&amp;#39;s talk about models a bit more.  Remember, models are the data in your app.  Generally, a model
will correspond to a database table.  So, when we are determing our models, we need to determine what attributes we want
to keep track of on our database table and if we would like to restrict any of these attributes.  Let&amp;#39;s create a simple User
model where we only want to keep track of the user&amp;#39;s email address.  We will run &lt;code&gt;Rails g model User email:string&lt;/code&gt;.  Which says &amp;#39;Rails,
generate a model called User that has a property of email, which is a string.&amp;#39;  This command will generate a &lt;em&gt;migration&lt;/em&gt; file,
modify our schema.db, and create a file as &lt;code&gt;app/models/user.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a bit of bonus information.  Let&amp;#39;s say we want to have a page that lists all of our users.  This means we want to
have an &lt;em&gt;index&lt;/em&gt; of our User model.  We need a User controller, index action.  Rails can create this for us, too!  We should run
&lt;code&gt;Rails g controller User index&lt;/code&gt;.  Which says &amp;#39;Rails generate a controller called User that has the action index.&amp;#39;  We will get
a route in the &lt;code&gt;config/routes.rb&lt;/code&gt; and file &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt;.  &lt;strong&gt;Note that the model is singular (User) while
the controller (Users Controller) is plural.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&#39;4&#39;&gt;&lt;/a&gt;Rake Commands&lt;/h3&gt;

&lt;p&gt;After you run a migration, you&amp;#39;ll need to tell your database to use it.  You should run &lt;code&gt;rake db:migrate&lt;/code&gt;.  A few other commands
you might find useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rake db:drop&lt;/code&gt; - drop the database.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:create&lt;/code&gt; - create the database. You&amp;#39;ll need to do this if you want to use postgres in development.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:seed&lt;/code&gt; - seed the database with fake data.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Models, and Views, and Controllers! Oh My!</title>
   <link href="/2015/02/04/models-and-views-and-controllers-oh-my/"/>
   <updated>2015-02-04T00:00:00-05:00</updated>
   <id>/2015/02/04/models-and-views-and-controllers-oh-my</id>
   <content type="html">&lt;h3&gt;MVC&lt;/h3&gt;

&lt;p&gt;So how does a web app work anyways?  Basically, your &lt;em&gt;model&lt;/em&gt; is your data.
Your &lt;em&gt;view&lt;/em&gt; is what the user sees.  And your &lt;em&gt;controller&lt;/em&gt; controls your data,
both from your web app to your view (what your user sees and interacts with) and
from your view to your model. MVC.&lt;/p&gt;

&lt;h3&gt;Homepage Controller&lt;/h3&gt;

&lt;p&gt;After you&amp;#39;ve run &lt;a href=&quot;/2015/01/30/web-app-101/&quot;&gt;Rails new&lt;/a&gt;, try to run
&lt;code&gt;rails s&lt;/code&gt; on the command line from the directory of your app.  Then navigate to
&lt;code&gt;http://localhost:3000/&lt;/code&gt; in your browser.  You&amp;#39;ll see an error.  This is because
we haven&amp;#39;t told our app the &lt;em&gt;route&lt;/em&gt; of our home page; that is, we need to tell our
app what the first controller action should do. Here are the steps to step up your homepage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;config/routes&lt;/strong&gt;, create a root_path.  E.g., &lt;code&gt;root &amp;#39;welcome#index&amp;#39;&lt;/code&gt;.  This will route
our homepage to the welcome controller, index action.&lt;/li&gt;
&lt;li&gt;In your &lt;strong&gt;app/views&lt;/strong&gt; folder, create a &lt;strong&gt;welcome&lt;/strong&gt; folder and a &lt;strong&gt;index.html.haml&lt;/strong&gt; file.
The welcome folder will host the view for the welcome controller.  The index.html.haml file
will host all of the homepage content.&lt;/li&gt;
&lt;li&gt;You can write standard HTML in the haml file, but haml also has some amazing capabilities
to interact with ruby.  &lt;a href=&quot;http://haml.info/&quot;&gt;Haml&lt;/a&gt; is awesome!&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;rails s&lt;/code&gt; from the command line and go to localhost:3000. Do you see the content from
the index.html.haml file?!&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Choosing Gems</title>
   <link href="/2015/02/03/basic-rails/"/>
   <updated>2015-02-03T00:00:00-05:00</updated>
   <id>/2015/02/03/basic-rails</id>
   <content type="html">&lt;p&gt;If you are familiar with any other programming language, you&amp;#39;ve probably come
across the notion of packages (R), SSCs (STATA), or modules (Python). In Ruby, we
have &lt;a href=&quot;https://rubygems.org/&quot;&gt;&lt;em&gt;Gems&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You control which gems are added to your Rails app by added them to you Gemfile.
Keep in mind you might want to keep some Gems out of your production environment, like
debugging Gems such as pry-rails. Here&amp;#39;s a snippet of my Gemfile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;unicorn&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_12factor&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;newrelic_rpm&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;raygun4ruby&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spring&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;better_errors&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;awesome_print&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I highly recommend the &lt;a href=&quot;https://github.com/charliesome/better_errors&quot;&gt;better_errors&lt;/a&gt; Gem; it makes debugging a breeze with helpful out and
a console to work directly from on the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/better_errors.jpg&quot; alt=&quot;better_errors&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can find Gems to handle pagination, votability, APIs, and a ton of other helpful things.
A few of my production Gems are needed for hosting a web app on Heroku, more on this later!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web App 101</title>
   <link href="/2015/01/30/web-app-101/"/>
   <updated>2015-01-30T00:00:00-05:00</updated>
   <id>/2015/01/30/web-app-101</id>
   <content type="html">&lt;p&gt;Over the past few months, I&amp;#39;ve helped build two websites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chkntndr.com&quot;&gt;CHKNTNDR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ohhey.me&quot;&gt;OHHEY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I figured I&amp;#39;d help a few people out, including myself, by recording my
steps along the way.&lt;/p&gt;

&lt;h3&gt;Setting up Git&lt;/h3&gt;

&lt;p&gt;This is a &lt;em&gt;must&lt;/em&gt;.  Even if you&amp;#39;re coding solo, you&amp;#39;re inevitably going
to want to look back at old versions of code. Or, more likely, you are
going to f&amp;#39; something up and need to return to a previous version of
code.  If you&amp;#39;re coding as a team, it&amp;#39;s how you&amp;#39;ll collaborate.&lt;/p&gt;

&lt;p&gt;Here are the first steps to initializing a code base for a new web app:
&lt;br&gt;
&lt;small&gt;My web app is called &lt;em&gt;alist&lt;/em&gt;, you should fill in the name of
your app accordingly.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;On GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a GitHub account&lt;/li&gt;
&lt;li&gt;Create a new repository
&lt;img src=&quot;/assets/new_repo.png&quot; alt=&quot;new repo&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On your terminal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &amp;#39;rails new alist&amp;#39; to create your new rails app.&lt;/li&gt;
&lt;li&gt;&amp;#39;Cd&amp;#39; into the alist directory. Run &amp;#39;git init&amp;#39; to initialize your new
repo.&lt;/li&gt;
&lt;li&gt;Add your remote repo (the repo on GitHub) by running &amp;#39;git remote add origin git@github.com:username/alist.git&amp;#39;&lt;/li&gt;
&lt;li&gt;Push your blank rails app to GitHub with &amp;#39;git push origin master.&amp;#39;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="/2014/10/17/introductory-blog/"/>
   <updated>2014-10-17T00:00:00-04:00</updated>
   <id>/2014/10/17/introductory-blog</id>
   <content type="html">&lt;p&gt;Hello there. If you happen to be reading this, &lt;em&gt;GOOD FOR YOU!&lt;/em&gt; Somehow, you&amp;#39;ve found a wormhole in the universe and landed on this blog.
You probably have a few questions.&lt;/p&gt;

&lt;h3&gt;Who are you?&lt;/h3&gt;

&lt;p&gt;Well, I&amp;#39;m Sarah.  I like to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;eat&lt;/li&gt;
&lt;li&gt;drink coffee&lt;/li&gt;
&lt;li&gt;play with big dogs&lt;/li&gt;
&lt;li&gt;code in Python, Ruby (learning!), R&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I live in Brooklyn, but I&amp;#39;m from Indiana.  I&amp;#39;m currently on an Amtrak train to Washington, DC.&lt;/p&gt;

&lt;h3&gt;What are you going to write about?&lt;/h3&gt;

&lt;p&gt;Great question.  Maybe food?  Maybe coffee shops?
Maybe dogs?  Probably coding?  Possibly all of the above?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m trying out several different blogging systems.
Right now, I&amp;#39;m working with a Jekyll theme called &lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Lanyon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
 </entry>
 

</feed>
